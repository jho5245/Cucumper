From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: jho5245 <jho5245@naver.com>
Date: Thu, 2 Oct 2025 13:00:12 +0900
Subject: [PATCH] Add support for recipe book matching


diff --git a/io/papermc/paper/inventory/recipe/StackedContentsExtrasMap.java b/io/papermc/paper/inventory/recipe/StackedContentsExtrasMap.java
index f47c12e9dd6cfa857ca07a764edc22de372e25b6..6e89479bc1d3815a794af719cfccd77a048a9e0d 100644
--- a/io/papermc/paper/inventory/recipe/StackedContentsExtrasMap.java
+++ b/io/papermc/paper/inventory/recipe/StackedContentsExtrasMap.java
@@ -16,6 +16,7 @@ public final class StackedContentsExtrasMap {
     private final StackedContents<ItemOrExact> contents;
     public Object2IntMap<ItemOrExact.Item> regularRemoved = new Object2IntOpenHashMap<>(); // needed for re-using the regular contents (for ShapelessRecipe)
     public final ObjectSet<ItemStack> exactIngredients = new ObjectOpenCustomHashSet<>(ItemStackLinkedSet.TYPE_AND_TAG);
+    public final java.util.List<java.util.function.Predicate<net.minecraft.world.item.ItemStack>> predicateIngredients = new java.util.ArrayList<>();
 
     public StackedContentsExtrasMap(final StackedContents<ItemOrExact> contents) {
         this.contents = contents;
@@ -24,6 +25,9 @@ public final class StackedContentsExtrasMap {
     public void initialize(final Recipe<?> recipe) {
         this.exactIngredients.clear();
         for (final Ingredient ingredient : recipe.placementInfo().ingredients()) {
+            if (ingredient.stackPredicate != null) {
+                this.predicateIngredients.add(ingredient.stackPredicate);
+            }
             if (ingredient.isExact()) {
                 this.exactIngredients.addAll(ingredient.itemStacks());
             }
@@ -54,11 +58,17 @@ public final class StackedContentsExtrasMap {
         for (final Object2IntMap.Entry<ItemOrExact.Item> entry : this.regularRemoved.object2IntEntrySet()) {
             this.contents.amounts.addTo(entry.getKey(), entry.getIntValue());
         }
+        this.predicateIngredients.clear();
         this.exactIngredients.clear();
         this.regularRemoved.clear();
     }
 
     public boolean accountStack(final ItemStack stack, final int count) {
+        for (java.util.function.Predicate<ItemStack> stackPredicate : this.predicateIngredients) {
+            if (!stackPredicate.test(stack)) continue;
+            this.contents.account(new ItemOrExact.Exact(stack), count);
+            return true;
+        }
         if (this.exactIngredients.contains(stack)) {
             this.contents.account(new ItemOrExact.Exact(stack), count);
             return true;
